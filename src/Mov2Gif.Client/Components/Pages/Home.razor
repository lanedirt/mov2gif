@page "/"
@rendermode InteractiveServer
@using System.IO
@using Mov2Gif.Utilities.GifConverter
@inject IJSRuntime JSRuntime

<PageTitle>MOV to GIF Converter</PageTitle>

<div class="max-w-3xl mx-auto">
    <h1 class="text-3xl font-bold mb-8 text-center">MOV to GIF Converter</h1>

    <div class="mb-8">
        <InputFile OnChange="@HandleFileSelected"
                  class="hidden"
                  accept=".mov"
                  @ref="inputFile"
                  id="fileInput" />

        <div @ref="fileDropContainer"
             class="border-2 border-dashed @(_isDragging ? "border-blue-500 bg-blue-100 shadow-lg scale-102" : "border-gray-300") rounded-lg p-12 text-center hover:border-blue-500 transition-all @(_outputGifStream == null ? "cursor-pointer" : "")"
             @onclick="@(_outputGifStream == null ? (() => OpenFileInput()) : null)">
            @if (_isConverting)
            {
                <div class="flex flex-col items-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
                    <p>Converting...</p>
                </div>
            }
            else if (_outputGifStream != null)
            {
                <div class="flex flex-col items-center">
                    <img src="@_outputGifUrl" alt="Converted GIF" class="max-w-full mb-4 mx-auto" />
                    <div class="text-sm text-gray-500 mb-4 text-center">
                        Input: @_inputFileSize → Output: @_outputFileSize
                    </div>
                    <div class="flex gap-4 justify-center">
                        <button @onclick="DownloadGif" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                            Download GIF
                        </button>
                        <button @onclick="Reset" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                            Convert Another
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div>
                    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <p class="text-lg mb-2">Drag and drop your .MOV file here</p>
                    <p class="text-sm text-gray-500">or click to select</p>
                </div>
            }
        </div>
    </div>

    @if (_outputGifStream != null && !_isConverting)
    {
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Optimize Output</h2>

            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Quality</label>
                    <input type="range"
                           min="5"
                           max="100"
                           @bind="_quality"
                           @bind:event="oninput"
                           class="w-full" />
                    <span class="text-sm text-gray-500">@_quality%</span>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Frame Rate</label>
                    <input type="range"
                           min="5"
                           max="50"
                           @bind="_frameRate"
                           @bind:event="oninput"
                           class="w-full" />
                    <span class="text-sm text-gray-500">@_frameRate fps</span>
                </div>

                <button @onclick="ReconvertWithOptions"
                        class="w-full bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                    Apply Changes
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool _isConverting;
    private string? _outputGifUrl;
    private MemoryStream? _outputGifStream;
    private int _quality = 50;
    private int _frameRate = 15;
    private IBrowserFile? _currentFile;
    private bool _isDragging;
    private string? _inputFileSize;
    private string? _outputFileSize;

    private InputFile inputFile;
    private ElementReference fileDropContainer;
    private IJSObjectReference _module;
    private IJSObjectReference _dropZoneInstance;
    private DotNetObjectReference<Home>? _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>(
                "initializeFileDropZone",
                fileDropContainer,
                inputFile.Element,
                _objectReference);
        }
    }

    [JSInvokable]
    public void OnDragEnter()
    {
        SetDragging(true);
    }

    [JSInvokable]
    public void OnDragLeave()
    {
        SetDragging(false);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        await ProcessFile(e.File);
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        if (!file.ContentType.Contains("quicktime"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a .MOV file");
            return;
        }

        _currentFile = file;
        _inputFileSize = FormatFileSize(file.Size);
        await ConvertToGif();
    }

    private async Task ConvertToGif()
    {
        if (_currentFile == null) return;

        _isConverting = true;
        StateHasChanged();

        try
        {
            using var stream = _currentFile.OpenReadStream(maxAllowedSize: 100_000_000); // 100MB max
            var converter = new MovToGifConverter();
            var convertedStream = await converter.ConvertToGif(stream, _frameRate, _quality);

            // Convert the Stream to MemoryStream
            _outputGifStream = new MemoryStream();
            await convertedStream.CopyToAsync(_outputGifStream);
            _outputGifStream.Position = 0;

            _outputFileSize = FormatFileSize(_outputGifStream.Length);

            var buffer = new byte[_outputGifStream.Length];
            await _outputGifStream.ReadAsync(buffer);
            _outputGifUrl = $"data:image/gif;base64,{Convert.ToBase64String(buffer)}";
        }
        finally
        {
            _isConverting = false;
            StateHasChanged();
        }
    }

    private async Task ReconvertWithOptions()
    {
        await ConvertToGif();
    }

    private async Task DownloadGif()
    {
        if (_outputGifStream != null && _currentFile != null)
        {
            var bytes = _outputGifStream.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var originalFileName = Path.GetFileNameWithoutExtension(_currentFile.Name);
            await JSRuntime.InvokeVoidAsync("downloadFile", $"data:image/gif;base64,{base64}", originalFileName);
            StateHasChanged();
        }
    }

    private void Reset()
    {
        _outputGifUrl = null;
        _outputGifStream?.Dispose();
        _outputGifStream = null;
        _currentFile = null;
        _quality = 50;
        _frameRate = 30;
        _inputFileSize = null;
        _outputFileSize = null;
        StateHasChanged();
    }

    private void SetDragging(bool isDragging)
    {
        _isDragging = isDragging;
        StateHasChanged();
    }

    private async Task OpenFileInput()
    {
        await JSRuntime.InvokeVoidAsync("document.getElementById('fileInput').click");
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _objectReference?.Dispose();
        _outputGifStream?.Dispose();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }
}
