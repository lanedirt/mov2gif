@page "/"
@rendermode InteractiveServer
@using System.IO
@using Mov2Gif.Client.Models
@using Mov2Gif.Utilities.GifConverter
@inject IJSRuntime JsRuntime

<PageTitle>MOV to GIF Converter</PageTitle>

<div class="mx-auto">
    <h1 class="text-3xl font-bold mb-8 text-center">
        <span @onclick="ReloadPage" class="hover:text-blue-500 transition-colors cursor-pointer">MOV to GIF Converter</span>
    </h1>

    <div class="mb-8 relative">
        <button @ref="fileDropContainer"
             class="border-2 z-10 w-full border-dashed @(_conversionSettings.IsDragging ? "border-blue-500 bg-blue-100 shadow-lg scale-102" : "border-gray-300") rounded-lg p-12 text-center hover:border-blue-500 transition-all @(_conversionSettings.OutputGifStream == null ? "cursor-pointer" : "")"
             @onclick="@(_conversionSettings.OutputGifStream == null ? (() => OpenFileInput()) : null)"
             @ontouchstart="@(_conversionSettings.OutputGifStream == null ? (() => OpenFileInput()) : null)">
            @if (_conversionSettings.IsConverting)
            {
                <div class="flex flex-col items-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
                    <p>Converting...</p>
                </div>
            }
            else if (_conversionSettings.OutputGifStream != null)
            {
                <ConversionResult
                    OutputGifUrl="@_conversionSettings.OutputGifUrl"
                    InputFileSize="@_conversionSettings.InputFileSize"
                    OutputFileSize="@_conversionSettings.OutputFileSize"
                    DownloadGifClicked="@(() => DownloadGif())"
                    ResetClicked="@(() => _conversionSettings.Reset())" />
            }
            else
            {
                <div>
                    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <p class="text-lg mb-2">Drag and drop your .MOV file here</p>
                </div>    
            }
        </button>
        
        <div class="z-10 w-full p-12 text-center hover:border-blue-500 transition-all @(!_conversionSettings.IsConverting && _conversionSettings.OutputGifStream == null ? "" : "hidden")">
            <div>
                <p class="mb-2">Or select a .MOV file manually</p>
            </div>
            <InputFile OnChange="@HandleFileSelected"
                   @ref="inputFile"
                   id="fileInput" />     
        </div>
    </div>

    @if (_conversionSettings.OutputGifStream != null && !_conversionSettings.IsConverting)
    {
        <ConversionSettingsForm     
            @bind-Quality="_conversionSettings.Quality"
            @bind-FrameRate="_conversionSettings.FrameRate"
            @bind-Resolution="_conversionSettings.Resolution"
            ReconvertWithOptions="ReconvertWithOptions" />
    }
</div>

@code {
    private ConversionSettings _conversionSettings = new();

    private InputFile inputFile;
    private ElementReference fileDropContainer;
    private IJSObjectReference _module;
    private IJSObjectReference _dropZoneInstance;
    private DotNetObjectReference<Home>? _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>(
                "initializeFileDropZone",
                fileDropContainer,
                inputFile.Element,
                _objectReference);
        }
    }

    [JSInvokable]
    public void OnDragEnter()
    {
        SetDragging(true);
    }

    [JSInvokable]
    public void OnDragLeave()
    {
        SetDragging(false);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        await ProcessFile(e.File);
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        if (!file.ContentType.Contains("quicktime"))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please select a .MOV file");
            return;
        }

        _conversionSettings.CurrentFile = file;
        _conversionSettings.InputFileSize = ConversionSettings.FormatFileSize(file.Size);
        await ConvertToGif();
    }

    private async Task ConvertToGif()
    {
        if (_conversionSettings.CurrentFile == null) return;

        _conversionSettings.IsConverting = true;
        StateHasChanged();

        try
        {
            using var stream = _conversionSettings.CurrentFile.OpenReadStream(maxAllowedSize: 100_000_000); // 100MB max
            var converter = new MovToGifConverter();
            var convertedStream = await converter.ConvertToGif(stream, _conversionSettings.FrameRate, _conversionSettings.Quality, _conversionSettings.Resolution);

            // Convert the Stream to MemoryStream
            _conversionSettings.OutputGifStream = new MemoryStream();
            await convertedStream.CopyToAsync(_conversionSettings.OutputGifStream);
            _conversionSettings.OutputGifStream.Position = 0;

            _conversionSettings.OutputFileSize = ConversionSettings.FormatFileSize(_conversionSettings.OutputGifStream.Length);

            var buffer = new byte[_conversionSettings.OutputGifStream.Length];
            await _conversionSettings.OutputGifStream.ReadAsync(buffer);
            _conversionSettings.OutputGifUrl = $"data:image/gif;base64,{Convert.ToBase64String(buffer)}";
        }
        finally
        {
            _conversionSettings.IsConverting = false;
            StateHasChanged();
        }
    }

    private async Task ReconvertWithOptions()
    {
        await ConvertToGif();
    }

    private async Task DownloadGif()
    {
        if (_conversionSettings.OutputGifStream != null && _conversionSettings.CurrentFile != null)
        {
            var bytes = _conversionSettings.OutputGifStream.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var originalFileName = Path.GetFileNameWithoutExtension(_conversionSettings.CurrentFile.Name);
            await JsRuntime.InvokeVoidAsync("downloadFile", $"data:image/gif;base64,{base64}", originalFileName);
            StateHasChanged();
        }
    }

    private void SetDragging(bool isDragging)
    {
        _conversionSettings.IsDragging = isDragging;
        StateHasChanged();
    }

    private async Task OpenFileInput()
    {
        if (inputFile.Element.HasValue)
        {
            await inputFile.Element.Value.FocusAsync();
            await JsRuntime.InvokeVoidAsync("click", inputFile.Element.Value);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _objectReference?.Dispose();
        _conversionSettings.OutputGifStream?.DisposeAsync();
    }
    
    private async Task ReloadPage()
    {
        await JsRuntime.InvokeVoidAsync("location.reload");
    }
}
